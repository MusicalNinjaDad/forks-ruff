name: check flake8_executable lints

on:
  push:
    branches: ["wsl**"]
  workflow_dispatch:

jobs:
  install_wsl:
    name: "Cache WSL vhdx"
    runs-on: windows-latest
    timeout-minutes: 20
    env:
      cache_key: "wsl_cache_v2"
      cache_file: "ubuntu_ruff.vhdx"
      cache_dir: ".wsl_cache"
      distro: "Ubuntu-24.04"
      ext4_workspace: "/${{ github.repository }}"
    outputs:
      cache_key: ${{ env.cache_key }}
      cache_location: ${{ steps.tmpdir.outputs.cache_location }}
      vhdx_file: ${{ steps.tmpdir.outputs.vhdx_file }}
      distro: ${{ env.distro }}
      ext4_workspace: ${{ env.ext4_workspace }}
    defaults:
      run:
        shell: wsl-bash {0}
    steps:
      - id: tmpdir
        name: "Identify full path to cache_dir"
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $cachePath = Join-Path ${{ runner.temp }} $env:cache_dir
          Write-Output "cache_location=$cachePath"
          Write-Output "cache_location=$cachePath" >> $env:GITHUB_OUTPUT
          $vhdxPath = Join-Path $cachePath $env:cache_file
          Write-Output "vhdx_file=$vhdxPath"
          Write-Output "vhdx_file=$vhdxPath" >> $env:GITHUB_OUTPUT
      - id: cache-wsl
        uses: actions/cache@v4
        with:
          key: ${{ env.cache_key }}
          path: ${{ steps.tmpdir.outputs.cache_location}}
      - name: "Setup WSL"
        if: ${{ steps.cache-wsl.outputs.cache-hit != 'true'}}
        uses: Vampire/setup-wsl@v5
        with:
          distribution: ${{ env.distro }}
          use-cache: 'false'
          additional-packages:
            build-essential
            mold
      - name: "Who am I"
        if: ${{ steps.cache-wsl.outputs.cache-hit != 'true'}}
        run: |
          id
          uname -a
      - name: "Filesystems"
        if: ${{ steps.cache-wsl.outputs.cache-hit != 'true'}}
        run: |
          df -T
      - name: "Create dir for ext4 workspace"
        if: ${{ steps.cache-wsl.outputs.cache-hit != 'true'}}
        run: |
          mkdir --parents $EXT4_WORKSPACE
      - name: "Install Rust toolchain"
        if: ${{ steps.cache-wsl.outputs.cache-hit != 'true'}}
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - name: "Install insta snapshot testing"
        if: ${{ steps.cache-wsl.outputs.cache-hit != 'true'}}
        run: |
          curl -LsSf https://insta.rs/install.sh | sh
      - name: "Install nextest"
        if: ${{ steps.cache-wsl.outputs.cache-hit != 'true'}}
        run: |
          source $HOME/.cargo/env
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
          cargo binstall cargo-nextest --secure -y
      - name: "Export distro for cache"
        if: ${{ steps.cache-wsl.outputs.cache-hit != 'true'}}
        shell: pwsh
        env:
          cache_location: ${{ steps.tmpdir.outputs.cache_location }}
          vhdx_file: ${{ steps.tmpdir.outputs.vhdx_file }}
        run: |
          $ErrorActionPreference = 'Stop'
          wsl --list
          wsl --shutdown
          New-Item -ItemType Directory -Path $env:cache_location -Force
          wsl --export --vhd $env:distro $env:vhdx_file
      - name: "Check vhdx file exists"
        id: check
        shell: pwsh
        env:
          vhdx_file: ${{ steps.tmpdir.outputs.vhdx_file }}
        run: |
            $ErrorActionPreference = 'Stop'
            if (Test-Path $env:vhdx_file) {
            exit 0
            } else {
            Write-Error "File not found: $env:vhdx_file"
            exit 1
            }
  
  test_wsl_ntfs:
    needs:
      install_wsl
    name: "Run tests on WSL - mounted NTFS filesystem"
    runs-on: windows-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: wsl-bash {0}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - id: cache-wsl
        uses: actions/cache@v4
        with:
          key: ${{ needs.install_wsl.outputs.cache_key }}
          path: ${{ needs.install_wsl.outputs.cache_location }}
      - name: "Import cached Distro"
        shell: pwsh
        env:
          vhdx_file: ${{ needs.install_wsl.outputs.vhdx_file }}
          distro: ${{ needs.install_wsl.outputs.distro }}
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Output "Updating WSL"
          wsl --update
          Write-Output "Importing $env:vhdx_file as $env:distro"
          wsl --import-in-place $env:distro $env:vhdx_file
      - name: "Setup WSL"
        uses: Vampire/setup-wsl@v5
        with:
          distribution: ${{ needs.install_wsl.outputs.distro }}
          use-cache: 'false'
      - name: "Who am I"
        run: |
          id
          uname -a
      - name: "Working Directory"
        run: |
          pwd
          ls -al
      - name: "Filesystems"
        run: |
          df -T
      - name: "Run tests"
        env:
          NEXTEST_PROFILE: "ci-short"
        run: |
          source $HOME/.cargo/env
          cargo insta test --check --test-runner nextest --package ruff_linter -- flake8_executable

  test_wsl_ext4:
    needs:
      install_wsl
    name: "Run tests on WSL Native filesystem"
    runs-on: windows-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: wsl-bash {0}
    env:
        WORKSPACEDIR: ${{ needs.install_wsl.outputs.ext4_workspace }}
    steps:
      - id: cache-wsl
        uses: actions/cache@v4
        with:
          key: ${{ needs.install_wsl.outputs.cache_key }}
          path: ${{ needs.install_wsl.outputs.cache_location }}
      - name: "Import cached Distro"
        shell: pwsh
        env:
          vhdx_file: ${{ needs.install_wsl.outputs.vhdx_file }}
          distro: ${{ needs.install_wsl.outputs.distro }}
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Output "Updating WSL"
          wsl --update
          Write-Output "Importing $env:vhdx_file as $env:distro"
          wsl --import-in-place $env:distro $env:vhdx_file
      - name: "Setup WSL"
        uses: Vampire/setup-wsl@v5
        with:
          distribution: ${{ needs.install_wsl.outputs.distro }}
          use-cache: 'false'
      - name: "Who am I"
        run: |
          id
          uname -a
      - name: "Checkout (manually)"
        # Needs hardening - move ref_name & repository to env var
        env:
          BRANCHNAME: ${{ github.ref_name }}
        run: |
          cd $WORKSPACEDIR
          git config --global --add safe.directory $WORKSPACEDIR
          git init $WORKSPACEDIR
          git remote add origin  https://github.com$WORKSPACEDIR
          git config --local gc.auto 0
          git -c protocol.version=2 fetch --no-tags --prune --no-recurse-submodules --depth=1 origin +${{ github.sha }}:refs/remotes/origin/$BRANCHNAME
          git sparse-checkout disable
          git config --local --unset-all extensions.worktreeConfig
          git checkout --progress --force -B $BRANCHNAME refs/remotes/origin/$BRANCHNAME
      - name: "Working Directory"
        run: |
          cd $WORKSPACEDIR
          pwd
          ls -al
      - name: "Filesystems"
        run: |
          cd $WORKSPACEDIR
          df -T
      - name: "Run tests"
        env:
          NEXTEST_PROFILE: "ci-short"
        run: |
          cd $WORKSPACEDIR
          source $HOME/.cargo/env
          cargo insta test --check --test-runner nextest --package ruff_linter -- flake8_executable

  test_linux:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8
      - name: "Install Rust toolchain"
        run: rustup show
      - name: "Install mold"
        uses: rui314/setup-mold@v1
      - name: "Install cargo nextest"
        uses: taiki-e/install-action@be7c31b6745feec79dec5eb79178466c0670bb2d # v2
        with:
          tool: cargo-nextest
      - name: "Install cargo insta"
        uses: taiki-e/install-action@be7c31b6745feec79dec5eb79178466c0670bb2d # v2
        with:
          tool: cargo-insta
      - name: "Run tests"
        shell: bash
        env:
          NEXTEST_PROFILE: "ci-short"
        run: cargo insta test --check --test-runner nextest --package ruff_linter -- flake8_executable