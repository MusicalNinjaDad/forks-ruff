name: check flake8_executable lints

on:
  push:
    branches: ["wsl**"]
  workflow_dispatch:

jobs:
  find_wsl_cache:
    uses: ./.github/workflows/wsl-distro-cache.yml
    
  
  test_wsl_ntfs:
    needs:
      find_wsl_cache
    name: "Run tests on WSL - mounted NTFS filesystem"
    runs-on: windows-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: wsl-bash {0}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - id: cache-wsl
        uses: actions/cache@v4
        with:
          key: ${{ needs.find_wsl_cache.outputs.cache_key }}
          path: ${{ needs.find_wsl_cache.outputs.cache_path }}
      - id: build_cache
        name: Restore rust build cache (if available)
        uses: actions/cache@v4
        with:
          key: "${{ github.workflow }}-${{ github.job }}-build_cache"
          path: ${{ github.workspace}}/target
      - name: "Import cached Distro"
        shell: pwsh
        env:
          VHDX_FILE: ${{ needs.find_wsl_cache.outputs.vhdx_file }}
          DISTRO: ${{ needs.find_wsl_cache.outputs.distro }}
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Output "Updating WSL"
          wsl --update
          Write-Output "Importing $env:VHDX_FILE as $env:DISTRO"
          wsl --import-in-place $env:DISTRO $env:VHDX_FILE
      - name: "Setup WSL"
        uses: Vampire/setup-wsl@v5
        with:
          distribution: ${{ needs.find_wsl_cache.outputs.distro }}
          use-cache: 'false'
      - name: "Who am I"
        run: |
          id
          uname -a
      - name: "Working Directory"
        run: |
          pwd
          ls -al
      - name: "Filesystems"
        run: |
          df -T
      - name: "Run tests"
        env:
          NEXTEST_PROFILE: "ci-short"
        run: |
          source $HOME/.cargo/env
          cargo insta test --check --test-runner nextest --package ruff_linter -- flake8_executable

  test_wsl_ext4:
    needs:
      find_wsl_cache
    name: "Run tests on WSL Native filesystem"
    runs-on: windows-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: wsl-bash {0}
    env:
        WORKSPACEDIR: ${{ needs.find_wsl_cache.outputs.ext4_workspace }}
    steps:
      - id: cache-wsl
        uses: actions/cache@v4
        with:
          key: ${{ needs.find_wsl_cache.outputs.cache_key }}
          path: ${{ needs.find_wsl_cache.outputs.cache_path }}
      - name: "Import cached Distro"
        shell: pwsh
        env:
          VHDX_FILE: ${{ needs.find_wsl_cache.outputs.vhdx_file }}
          DISTRO: ${{ needs.find_wsl_cache.outputs.distro }}
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Output "Updating WSL"
          wsl --update
          Write-Output "Importing $env:VHDX_FILE as $env:DISTRO"
          wsl --import-in-place $env:DISTRO $env:VHDX_FILE
      - name: "Setup WSL"
        uses: Vampire/setup-wsl@v5
        with:
          distribution: ${{ needs.find_wsl_cache.outputs.distro }}
          use-cache: 'false'
      - name: "Who am I"
        run: |
          id
          uname -a
      - name: "Checkout (manually)"
        # Needs hardening - move ref_name & repository to env var
        env:
          BRANCHNAME: ${{ github.ref_name }}
        run: |
          cd ${{ env.WORKSPACEDIR }}
          git config --global --add safe.directory ${{ env.WORKSPACEDIR }}
          git init ${{ env.WORKSPACEDIR }}
          git remote add origin https://github.com/${{ github.repository }}
          git config --local gc.auto 0
          git -c protocol.version=2 fetch --no-tags --prune --no-recurse-submodules --depth=1 origin +${{ github.sha }}:refs/remotes/origin/${{ env.BRANCHNAME }}
          git sparse-checkout disable
          git config --local --unset-all extensions.worktreeConfig
          git checkout --progress --force -B ${{ env.BRANCHNAME }} refs/remotes/origin/${{ env.BRANCHNAME }}
      - name: "Working Directory"
        run: |
          cd ${{ env.WORKSPACEDIR }}
          pwd
          ls -al
      - name: "Filesystems"
        run: |
          cd ${{ env.WORKSPACEDIR }}
          df -T
      - name: "Run tests"
        env:
          NEXTEST_PROFILE: "ci-short"
        run: |
          cd ${{ env.WORKSPACEDIR }}
          source $HOME/.cargo/env
          cargo insta test --check --test-runner nextest --package ruff_linter -- flake8_executable

  test_linux:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8
      - name: "Install Rust toolchain"
        run: rustup show
      - name: "Install mold"
        uses: rui314/setup-mold@v1
      - name: "Install cargo nextest"
        uses: taiki-e/install-action@be7c31b6745feec79dec5eb79178466c0670bb2d # v2
        with:
          tool: cargo-nextest
      - name: "Install cargo insta"
        uses: taiki-e/install-action@be7c31b6745feec79dec5eb79178466c0670bb2d # v2
        with:
          tool: cargo-insta
      - name: "Run tests"
        shell: bash
        env:
          NEXTEST_PROFILE: "ci-short"
        run: cargo insta test --check --test-runner nextest --package ruff_linter -- flake8_executable